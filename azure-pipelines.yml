pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    jobs:
      - job: build
        displayName: Build ADDE
        workspace:
          clean: all
        steps:
          - task: Docker@2
            inputs:
              command: "build"
              Dockerfile: "frontend/Dockerfile"
              tags: |
                $(Build.BuildId)
              repository: adde/frontend
          - task: ECRPushImage@1
            inputs:
              awsCredentials: "aws-devopslibrary"
              regionName: "us-east-1"
              imageSource: "imagename"
              sourceImageName: "adde/frontend"
              repositoryName: "adde/frontend"
              sourceImageTag: "$(Build.BuildId)"
              pushTag: "$(Build.Id)"
          - task: ECRPushImage@1
            inputs:
              awsCredentials: "aws-devopslibrary"
              regionName: "us-east-1"
              imageSource: "imagename"
              sourceImageName: "adde/frontend"
              repositoryName: "adde/frontend"
              sourceImageTag: "$(Build.BuildId)"
          - task: DownloadSecureFile@1
            name: privateKey
            inputs:
              secureFile: "private-key.pem"
          - task: DownloadSecureFile@1
            name: envFile
            inputs:
              secureFile: "test.env"
          - script: |
              mv $(envFile.secureFilePath) backend/test.env
              mv $(privateKey.secureFilePath) backend/private-key.pem
            displayName: Create test.env
          - script: |
              mkdir -p /tmp/cache/devopslibrary && cd /tmp/cache/devopslibrary && git clone https://github.com/devopslibrary/sampledata.git
            displayName: Download SampleData repo to cache
          - script: |
              cd backend && yarn --frozen-lockfile
            displayName: "Yarn Install Backend"
          - script: |
              cd frontend && yarn --frozen-lockfile
            displayName: "Yarn Install Frontend"
          - script: |
              cd backend && yarn test
            displayName: "Jest Testing Backend"
          - script: |
              cd frontend && yarn test
            displayName: "Jest Testing Frontend"
          - task: Bash@3
            inputs:
              targetType: "inline"
              script: "npm install typescript"
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: "SonarCloud DevOpsLibrary"
              organization: "devopslibrary"
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: "devopslibrary_adde"
              cliProjectName: "adde"
              cliProjectVersion:
              cliSources: "."
              extraProperties: |
                sonar.sources=backend/,frontend/src
                sonar.tests=backend/,frontend/tests,frontend/src
                sonar.test.inclusions=**/*.spec.ts,**/*.test.ts
                sonar.typescript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
                sonar.testExecutionReportPaths=backend/test-report.xml
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: "300"
          - task: SonarCloudAnalyze@1
