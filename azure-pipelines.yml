pool:
  vmImage: "ubuntu-latest"

steps:
  # ---------- Frontend ------------- #
  # - task: ECRPullImage@1
  #   displayName: Pull Cached Adde/Frontend Container
  #   inputs:
  #     awsCredentials: aws-devopslibrary
  #     repository: adde/frontend
  #     imageTag: latest
  #     regionName: us-east-1
  # - task: Docker@2
  #   displayName: Build Adde/Frontend Container
  #   inputs:
  #     command: "build"
  #     Dockerfile: "frontend/Dockerfile"
  #     tags: |
  #       $(Build.BuildId)
  #     addPipelineData: false
  #     arguments: |
  #       --cache-from=389059433654.dkr.ecr.us-east-1.amazonaws.com/adde/frontend:latest
  #     repository: adde/frontend
  # - task: ECRPushImage@1
  #   inputs:
  #     awsCredentials: aws-devopslibrary
  #     regionName: "us-east-1"
  #     imageSource: "imagename"
  #     sourceImageName: "adde/frontend"
  #     repositoryName: adde/frontend
  #     sourceImageTag: "$(Build.BuildId)"
  # - task: ECRPushImage@1
  #   inputs:
  #     awsCredentials: aws-devopslibrary
  #     regionName: "us-east-1"
  #     imageSource: "imagename"
  #     sourceImageName: "adde/frontend"
  #     repositoryName: adde/frontend
  #     sourceImageTag: $(Build.BuildId)
  #     pushTag: $(Build.BuildId)
  # - script: |
  #     docker run -v `pwd`/frontend/coverage:/home/node/coverage adde/frontend:$(Build.BuildId) yarn test
  #   displayName: "Jest Test Frontend"
  # ---------- Backend ------------- #
  - task: ECRPullImage@1
    displayName: Pull Cached Adde/Backend Container
    inputs:
      awsCredentials: aws-devopslibrary
      repository: adde/backend
      imageTag: latest
      regionName: us-east-1
  - task: Docker@2
    displayName: Build Adde/Backend Container
    inputs:
      command: "build"
      Dockerfile: "backend/Dockerfile"
      tags: |
        $(Build.BuildId)
      addPipelineData: false
      arguments: |
        --cache-from=389059433654.dkr.ecr.us-east-1.amazonaws.com/adde/backend:latest
      repository: adde/backend
  - task: ECRPushImage@1
    inputs:
      awsCredentials: aws-devopslibrary
      regionName: "us-east-1"
      imageSource: "imagename"
      sourceImageName: "adde/backend"
      repositoryName: adde/backend
      sourceImageTag: "$(Build.BuildId)"
  - task: ECRPushImage@1
    inputs:
      awsCredentials: aws-devopslibrary
      regionName: "us-east-1"
      imageSource: "imagename"
      sourceImageName: "adde/backend"
      repositoryName: adde/backend
      sourceImageTag: $(Build.BuildId)
      pushTag: $(Build.BuildId)
  - task: DownloadSecureFile@1
    name: envFile
    inputs:
      secureFile: "test.env"
  - task: DownloadSecureFile@1
    name: privateKey
    inputs:
      secureFile: "private-key.pem"
  - script: |
      mv $(envFile.secureFilePath) backend/test.env
      mv $(privateKey.secureFilePath) backend/private-key.pem
      mkdir -p backend/cache/devopslibrary && cd backend/cache/devopslibrary && git clone https://github.com/devopslibrary/sampledata.git
      chmod -R 755 backend
      docker run --name backend \
                 -v `pwd`/backend/private-key.pem:/home/node/private-key.pem \
                 -v `pwd`/backend/test.env:/home/node/production.env \
                 -v `pwd`/backend/cache:/tmp/cache adde/backend:$(Build.BuildId) \
                 yarn test
      docker cp backend:/home/node/test-report.xml `pwd`/backend/test-report.xml; 
      docker cp backend:/home/node/coverage `pwd`/backend/coverage; 
    displayName: "Jest Test Backend"
  - task: Bash@3
    inputs:
      targetType: "inline"
      script: "npm install typescript"
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: "SonarCloud DevOpsLibrary"
      organization: "devopslibrary"
      scannerMode: "CLI"
      configMode: "manual"
      cliProjectKey: "devopslibrary_adde"
      cliProjectName: "adde"
      cliProjectVersion:
      cliSources: "."
      extraProperties: |
        sonar.sources=backend/,frontend/src
        sonar.tests=backend/,frontend/tests,frontend/src
        sonar.test.inclusions=**/*.spec.ts,**/*.test.ts
        sonar.typescript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
        sonar.testExecutionReportPaths=backend/test-report.xml
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: "300"
  - task: SonarCloudAnalyze@1
